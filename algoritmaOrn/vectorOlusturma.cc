/*

ğŸ“Œ Plan: Kendi Vector SÄ±nÄ±fÄ±mÄ±zÄ± Yazmak

AmacÄ± anlamak â†’ Vector nedir, neden kullanÄ±lÄ±r?

Normal array sabit boyutlu.

Vector ise dinamik: kapasitesi yetmezse yeni bir alan aÃ§ar, eski elemanlarÄ± kopyalar, kapasiteyi bÃ¼yÃ¼tÃ¼r.

Temel YapÄ±

class MyVector oluÅŸturacaÄŸÄ±z.

Ä°Ã§inde ÅŸu 3 Ã¶nemli ÅŸey olacak:

int* data; â†’ ElemanlarÄ± tuttuÄŸumuz dinamik array.

int size; â†’ KaÃ§ eleman var?

int capacity; â†’ Bellekte ne kadar yer ayrÄ±ldÄ±?

Temel Fonksiyonlar

push_back(int value) â†’ sona eleman ekle

pop_back() â†’ sondaki elemanÄ± sil

operator[] â†’ indeks ile eriÅŸim

size() ve capacity() fonksiyonlarÄ±

Dinamik BÃ¼yÃ¼me MekanizmasÄ±

Kapasite dolarsa 2 * capacity olacak ÅŸekilde yeni array aÃ§Ä±p kopyalama yapacaÄŸÄ±z.

Ekstra Fonksiyonlar (opsiyonel, ileri seviye)

clear()

resize(n)

insert(index, value)

erase(index)
*/

#include <iostream>
using namespace std;

class MyVector
{
private:
    int *data;     // elemanlarÄ± tutacaÄŸÄ±mÄ±z pointer
    int _size;     // ÅŸu anki eleman sayÄ±sÄ±
    int _capacity; // ayrÄ±lmÄ±ÅŸ kapasite

public:
    // Constructor
    MyVector()
    {
        data = new int[1]; // 1 kapasiteyle baÅŸlÄ±yoruz
        _size = 0;
        _capacity = 1;
    }

    // Eleman sayÄ±sÄ±
    int size() const
    {
        return _size;
    }

    // Kapasite
    int capacity() const
    {
        return _capacity;
    }

    // Eleman ekle
    void push_back(int value)
    {
        if (_size == _capacity)
        {
            // 1. Yeni kapasite
            int newCapacity = _capacity * 2;
            int *newData = new int[newCapacity];

            // 2. Eskileri kopyala
            for (int i = 0; i < _size; i++)
            {
                newData[i] = data[i];
            }

            // 3. Eskiyi sil
            delete[] data;

            // 4. Yeniye geÃ§
            data = newData;
            _capacity = newCapacity;
        }

        // 5. Yeni eleman ekle
        data[_size] = value;
        _size++;
    }

    // ElemanlarÄ± yazdÄ±r (test iÃ§in)
    void print() const
    {
        for (int i = 0; i < _size; i++)
        {
            cout << data[i] << " ";
        }
        cout << endl;
    }
};

int main()
{
    MyVector v;
    v.push_back(10);
    v.push_back(20);
    v.push_back(30);
    v.push_back(40);

    cout << "size = " << v.size() << endl;
    cout << "capacity = " << v.capacity() << endl;

    v.print();
}